import agents.interfaces.AgentTrace
import agents.interfaces.Do
import agents.interfaces.ICreateAgent
import java.util.concurrent.Executor

namespace agents{

	
	component Launcher{
		requires lancer: Do
	}
	
	ecosystem BigEco{
		part ecoAE: EcoAgentsEtat
		part fw: Forward[Do]
		part launcher: Launcher{
			bind lancer to fw.i
		}
		
		species DynamicAssembly(id: String){
			use agentE: ecoAE.AgentEtat(id)
			use aFW: fw.Agent{
				bind a to agentE.cycle
			}
		}
	}
	
	ecosystem EcoAgentsEtat{
		species AgentEtat(id: String){
			
			part act: Act
	
			part decide: Decide{
				bind action to act.action
			}
	
			part perceive: Perceive{
				bind decision to decide.decision
			}
			
			//requires getTraceElement: IGetAction
			
			provides cycle: Do = perceive.perception
		}
		
		species AgentTransition(id:String){
			
		}
	}
	
	ecosystem Forward[I]{
		 provides createAgent: ICreateAgent
		 species Agent{
		 	requires a:I
		 }
		 
		 provides i:I
	}
	
	component LauncherComponent{
		provides exec: Executor
	}
	
	component Perceive{
		provides perception: Do
		requires decision: Do
	}
	
	component Decide{
		provides decision: Do
		requires action: Do
	}
	
	component Act{
		provides action: Do
	}
		
	
}