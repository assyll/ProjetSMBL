import agents.interfaces.Do
import agents.interfaces.IGetThread
import agents.interfaces.PullMessage
import agents.interfaces.SendMessage
import agents.interfaces.StateAction
import agents.interfaces.StateMemory
import environnement.interfaces.ContextInfos
import environnement.interfaces.EnvUpdate
import generalStructure.interfaces.CycleAlert
import generalStructure.interfaces.ICreateAgent
import environnement.interfaces.EnvInfos
import agents.interfaces.TransAction
import agents.interfaces.TransMemory
import generalStructure.interfaces.ILog
import trace.ActionTrace
import generalStructure.interfaces.IGraph
import agents.interfaces.ISuicide
import agents.IStart
import generalStructure.interfaces.IInit

namespace general{

	ecosystem EcoAgents/*[ActionableState, ActionableTransition, ContextSA, ContextTA, ContextUpdate, StateSharedMemory, TransSharedMemory, Push, Pull] */{
		requires threads: IGetThread
		requires createAgent: ICreateAgent
		provides startCycle: IStart
		provides init: IInit
		
		species StateAgent (id: String, isRoot: boolean) {
			provides cycle: Do = agentComponent.cycle
			provides create: ICreateAgent
			provides suicide: ISuicide
			
			requires getContext: ContextInfos
			requires setContext: EnvUpdate
			requires finishedCycle: CycleAlert
			requires push: SendMessage
			requires pull: PullMessage
			requires finishedCycleForLog: ILog
			requires graph: IGraph
			
			 part agentComponent: Agent[ContextInfos, EnvUpdate, StateAction, StateMemory, ICreateAgent, SendMessage, PullMessage] {
			 	bind getContext to getContext
			 	bind setContext to setContext
			 	bind finishedCycle to finishedCycle
			 	bind push to push
			 	bind pull to pull
			 	bind create to create
			 	bind finishedCycleForLog to finishedCycleForLog
			 	bind graph to graph
			 	bind suicide to suicide
			 }
						
			//requires getTraceElement: IGetAction
		}
		
		species TransitionAgent(id:String, action:ActionTrace, idSource: String, idCible: String, createCible: boolean) {
			
			provides cycle: Do = agentComponent.cycle
			provides create: ICreateAgent
			provides suicide: ISuicide
			
			requires getContext: EnvInfos
			requires setContext: EnvUpdate
			requires finishedCycle: CycleAlert
			requires push: SendMessage
			requires pull: PullMessage
			requires finishedCycleForLog: ILog
			requires graph: IGraph
			
			part agentComponent: Agent[EnvInfos, EnvUpdate, TransAction, TransMemory, ICreateAgent, SendMessage, PullMessage] {
				bind getContext to getContext
			 	bind setContext to setContext
			 	bind finishedCycle to finishedCycle
			 	bind push to push
			 	bind pull to pull
			 	bind create to create
			 	bind finishedCycleForLog to finishedCycleForLog
			 	bind graph to graph
			 	bind suicide to suicide
			}
		}
	}
	
	component Agent[Context, ContextUpdate, Actionable, SharedMemory, CreateAgent, Push, Pull] {

		part memory: Memory[SharedMemory]
		
		part perceive: Perceive[Context, SharedMemory, Pull] {
			bind decision to decide.decision
			bind getContext to getContext
			bind memory to memory.infos
			bind getMessage to pull
			
		}
			
		part decide: Decide[Actionable, SharedMemory] {
			bind action to act.action
			bind memory to memory.infos
		}
	
		part act: Act[Actionable,ContextUpdate, SharedMemory, CreateAgent, Push] {
			bind finishedCycle to finishedCycle
			bind setContext to setContext
			bind memory to memory.infos
			bind create to create
			bind finishedCycleForLog to finishedCycleForLog
			bind graph to graph
			bind sendMessage to push
			bind suicide to suicide
		}
		
		provides cycle: Do = perceive.perception
		requires getContext: Context
		requires setContext: ContextUpdate
		requires finishedCycle: CycleAlert
		requires push: Push
		requires pull: Pull
		requires create: CreateAgent
		requires finishedCycleForLog: ILog
		requires graph: IGraph
		requires suicide: ISuicide
	}
	
	component Perceive[Context, SharedMemory, Pull] {
		provides perception: Do
		requires decision: Do
		requires getContext: Context
		requires memory: SharedMemory
		requires getMessage: Pull
	}
	
	component Decide[Actionable, SharedMemory] {
		provides decision: Do
		requires action: Actionable
		requires memory: SharedMemory
	}
	
	component Act[Actionable, ContextUpdate, SharedMemory, CreateAgent, Push] {
		provides action: Actionable
		requires finishedCycle: CycleAlert
		requires setContext: ContextUpdate
		requires memory: SharedMemory
		requires create: CreateAgent
		requires finishedCycleForLog: ILog
		requires graph: IGraph
		requires sendMessage: Push
		requires suicide: ISuicide
	}
		
	component Memory[SharedMemory] {
		provides infos: SharedMemory
	}
	
}