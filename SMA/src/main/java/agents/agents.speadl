import agents.interfaces.Do
import agents.interfaces.IGetThread
import generalStructure.interfaces.CycleAlert
import generalStructure.interfaces.ICreateAgent
import trace.Action

namespace general{

	ecosystem EcoAgents[ActionableState, ActionableTransition, ContextSA, ContextTA, ContextUpdate, StateSharedMemory, TransSharedMemory, Push, Pull] {
		requires threads: IGetThread
		requires createAgent: ICreateAgent
		
		species StateAgent (id: String) {
			provides cycle: Do = agentComponent.cycle
			requires getContext: ContextSA
			requires setContext: ContextUpdate
			requires finishedCycle: CycleAlert
			requires push: Push
			requires pull: Pull
			
			 part agentComponent: Agent[ContextSA, ContextUpdate, ActionableState, StateSharedMemory, Push, Pull] {
			 	bind getContext to getContext
			 	bind setContext to setContext
			 	bind finishedCycle to finishedCycle
			 	bind push to push
			 	bind pull to pull
			 }
						
			//requires getTraceElement: IGetAction
		}
		
		species TransitionAgent(id:String, action:Action , stateSource:String) {
			
			provides cycle: Do = agentComponent.cycle
			requires getContext: ContextTA
			requires setContext: ContextUpdate
			requires finishedCycle: CycleAlert
			requires push: Push
			requires pull: Pull
			
			part agentComponent: Agent[ContextTA, ContextUpdate, ActionableTransition, TransSharedMemory, Push, Pull] {
				bind getContext to getContext
			 	bind setContext to setContext
			 	bind finishedCycle to finishedCycle
			 	bind push to push
			 	bind pull to pull
			}
		}
	}
	
	component Agent[Context, ContextUpdate, Actionable, SharedMemory, Push, Pull] {
		part memory: Memory[SharedMemory]
		
		part perceive: Perceive[Context, SharedMemory, Pull] {
			bind decision to decide.decision
			bind getContext to getContext
			bind memory to memory.infos
		}
			
		part decide: Decide[Actionable, SharedMemory] {
			bind action to act.action
			bind memory to memory.infos
		}
	
		part act: Act[Actionable,ContextUpdate, SharedMemory, Push] {
			bind finishedCycle to finishedCycle
			bind setContext to setContext
			bind memory to memory.infos
		}
		
		provides cycle: Do = perceive.perception
		requires getContext: Context
		requires setContext: ContextUpdate
		requires finishedCycle: CycleAlert
		requires push: Push
		requires pull: Pull
	}
	
	component Perceive[Context, SharedMemory, Pull] {
		provides perception: Do
		requires decision: Do
		requires getContext: Context
		requires memory: SharedMemory
	}
	
	component Decide[Actionable, SharedMemory] {
		provides decision: Do
		requires action: Actionable
		requires memory: SharedMemory
	}
	
	component Act[Actionable, ContextUpdate, SharedMemory, Push] {
		provides action: Actionable
		requires finishedCycle: CycleAlert
		requires setContext: ContextUpdate
		requires memory: SharedMemory
	}
		
	component Memory[SharedMemory] {
		provides infos: SharedMemory
	}
	
}