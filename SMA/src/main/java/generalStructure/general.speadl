import agents.interfaces.Callable
import agents.interfaces.IGetThread
import generalStructure.interfaces.CycleAlert
import generalStructure.interfaces.ICreateAgent
import trace.Action
import trace.interfaces.ITakeAction
import environnement.interfaces.ContextInfos
import environnement.interfaces.EnvInfos
import environnement.interfaces.EnvUpdate
import agents.interfaces.SendMessage
import agents.interfaces.PullMessage
import generalStructure.interfaces.ILog
import generalStructure.interfaces.IStop

namespace general{
	
	component Launcher{
		provides call: Callable
		provides finishedCycle: CycleAlert
		provides threads: IGetThread
		requires stopProcessus: IStop
	}
	
	ecosystem BigEco {
		
		provides creatAgent : ICreateAgent
			
		part logComp: LogComp
		
		part ecoAE: EcoAgents {
			bind threads to launcher.threads
			bind createAgent to creatAgent
		}
		
		part fw: Forward[CycleAlert, ContextInfos, EnvInfos, EnvUpdate, SendMessage, PullMessage, ITakeAction] {
			bind i to launcher.finishedCycle
			bind h to envEco.envInfos
			bind k to envEco.envUpdate
			bind j to actionProvider.actionGetter
			bind log to logComp.log
		}
		
		part actionProvider: ActionProvider 
		
		part launcher: Launcher {
			bind stopProcessus to fw.stopProcessus
		}
		
		part envEco: Environnement[EnvInfos, EnvUpdate]
		
		species DynamicAssemblyAgentTransition(id: String, action:Action, stateSourceId:String) {
			use agentT: ecoAE.TransitionAgent(id, action, stateSourceId) {
				bind finishedCycle to aFW.a
				bind getContext to aFW.b
				bind setContext to aFW.c
				bind push to aFW.d
				bind pull to aFW.e
				bind finishedCycleForLog to aFW.finishedCycleForLog
			}
			use aFW: fw.TransForward(id)
		}
		                                                                                                                                                                                                                                                                      
		species DynamicAssemblyAgentEtat(id: String, isRoot: boolean) {
					
			use agentE: ecoAE.StateAgent(id, isRoot) {
				bind finishedCycle to aFW.a
				bind getContext to aFW.b
				bind setContext to aFW.c
				bind push to aFW.d
				bind pull to aFW.e
				bind finishedCycleForLog to aFW.finishedCycleForLog
			}
			use aFW: fw.StateForward(id, isRoot)
		}
	}
	
	
	ecosystem Forward[CycleAlert, ContextSA, ContextTA, ContextUpdate, Push, Pull, ActionGetter] {
		 species StateForward (id: String, isRoot: boolean) {
		 	provides a: CycleAlert
		 	provides b: ContextSA
		 	provides c: ContextUpdate
		 	provides d: Push
		 	provides e: Pull
		 	provides finishedCycleForLog: ILog
		 }
		 
		  species TransForward (id: String) {
		 	provides a: CycleAlert
		 	provides b: ContextTA
		 	provides c: ContextUpdate
		 	provides d: Push
		 	provides e: Pull
		 	provides finishedCycleForLog: ILog
		 }
		 
		 requires i: CycleAlert
		 requires j: ActionGetter
		 requires h: ContextTA
		 requires k: ContextUpdate
		 provides l: Push
		 requires log: ILog
		 provides stopProcessus: IStop
	}
	
	component LogComp {
		provides log: ILog
	}
	
	
}