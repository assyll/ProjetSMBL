import agents.interfaces.Callable
import agents.interfaces.IGetThread
import agents.interfaces.PullMessage
import agents.interfaces.SendMessage
import environnement.interfaces.ContextInfos
import environnement.interfaces.EnvInfos
import environnement.interfaces.EnvUpdate
import generalStructure.interfaces.CycleAlert
import generalStructure.interfaces.ICreateAgent
import generalStructure.interfaces.ILog
import generalStructure.interfaces.IStop
import trace.ActionTrace
import trace.interfaces.ITakeAction
import generalStructure.interfaces.IGraph
import generalStructure.interfaces.UpdateGraph

namespace general{
	
	component Launcher{
		provides call: Callable
		provides finishedCycle: CycleAlert
		provides threads: IGetThread
		requires stopProcessus: IStop
	}
	
	ecosystem BigEco {
		
		provides creatAgent : ICreateAgent
			
		part logComp: LogComp
		
		part graphComp: GraphComp
		
		part fenetreComp: FenetreComp {
			bind callable to launcher.call
			bind updateGraph to graphComp.updateGraph
		}
		
		part ecoAE: EcoAgents {
			bind threads to launcher.threads
			bind createAgent to creatAgent
		}
		
		part fw: Forward[CycleAlert, ContextInfos, EnvInfos, EnvUpdate, SendMessage, PullMessage, ITakeAction] {
			bind i to launcher.finishedCycle
			bind h to envEco.envInfos
			bind k to envEco.envUpdate
			bind j to actionProvider.actionGetter
			bind log to logComp.log
			bind graph to graphComp.graph
		}
		
		part actionProvider: ActionProvider 
		
		part launcher: Launcher {
			bind stopProcessus to fw.stopProcessus
		}
		
		part envEco: Environnement[EnvInfos, EnvUpdate]
		
		species DynamicAssemblyAgentTransition(id: String, action:ActionTrace, idSource: String, idCible: String, createCible: boolean) {
			use agentT: ecoAE.TransitionAgent(id, action, idSource, idCible, createCible) {
				bind finishedCycle to aFW.a
				bind getContext to aFW.b
				bind setContext to aFW.c
				bind push to aFW.d
				bind pull to aFW.e
				bind finishedCycleForLog to aFW.finishedCycleForLog
				bind graph to aFW.graph
			}
			use aFW: fw.TransForward(id)
		}
		                                                                                                                                                                                                                                                                      
		species DynamicAssemblyAgentEtat(id: String, isRoot: boolean) {
					
			use agentE: ecoAE.StateAgent(id, isRoot) {
				bind finishedCycle to aFW.a
				bind getContext to aFW.b
				bind setContext to aFW.c
				bind push to aFW.d
				bind pull to aFW.e
				bind finishedCycleForLog to aFW.finishedCycleForLog
				bind graph to aFW.graph
			}
			use aFW: fw.StateForward(id, isRoot)
		}
	}
	
	
	ecosystem Forward[CycleAlert, ContextSA, ContextTA, ContextUpdate, Push, Pull, ActionGetter] {
		 species StateForward (id: String, isRoot: boolean) {
		 	provides a: CycleAlert
		 	provides b: ContextSA
		 	provides c: ContextUpdate
		 	provides d: Push
		 	provides e: Pull
		 	provides finishedCycleForLog: ILog
		 	provides graph: IGraph
		 }
		 
		  species TransForward (id: String) {
		 	provides a: CycleAlert
		 	provides b: ContextTA
		 	provides c: ContextUpdate
		 	provides d: Push
		 	provides e: Pull
		 	provides finishedCycleForLog: ILog
		 	provides graph: IGraph
		 }
		 
		 requires i: CycleAlert
		 requires j: ActionGetter
		 requires h: ContextTA
		 requires k: ContextUpdate
		 provides l: Push
		 requires log: ILog
		 requires graph: IGraph
		 provides stopProcessus: IStop
	}
	
	component LogComp {
		provides log: ILog
	}
	
	component GraphComp {
		provides graph: IGraph
		provides updateGraph: UpdateGraph
	}
	
	component FenetreComp {
		requires callable: Callable
		requires updateGraph: UpdateGraph
	}
	
	
}