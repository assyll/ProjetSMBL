import agents.interfaces.Callable
import generalStructure.interfaces.CycleAlert
import agents.interfaces.IGetThread
import environnement.interfaces.EnvInfos
import environnement.interfaces.EnvUpdate
import trace.Action
import java.util.List
import environnement.interfaces.CellInfo

namespace general{
	
	component Launcher{
		provides call: Callable
		provides finishedCycle: CycleAlert
		provides threads: IGetThread
	}
	
	ecosystem BigEco[ActionableState, ActionableTransition, Context, ContextUpdate, StateSharedMemory, TransSharedMemory, Push, Pull] {
		part ecoAE: EcoAgents[ActionableState, ActionableTransition, Context, ContextUpdate, StateSharedMemory, TransSharedMemory, Push, Pull] {
			bind threads to launcher.threads
		}
		
		part fw: Forward[CycleAlert, Context, ContextUpdate, Push, Pull] {
			bind i to launcher.finishedCycle
			bind j to envEco.envInfos
			bind k to envEco.envUpdate
		}
		
		/*part fwTrans: Forward[CycleAlert, Context, ContextUpdate, Push, Pull] {
			bind i to launcher.finishedCycle
			bind j to envEco.envInfos
			bind k to envEco.envUpdate
		}*/
		
		part launcher: Launcher
		
		part envEco: Environnement[Context, ContextUpdate]
		
		species DynamicAssemblyAgentTransition(id: String) {
			use agentT: ecoAE.TransitionAgent(id) {
				bind finishedCycle to aFW.a
				bind getContext to aFW.b
				bind setContext to aFW.c
				bind push to aFW.d
				bind pull to aFW.e
			}
			use aFW: fw.TransForward(id)
		}
		                                                                                                                                                                                                                                                                      
		species DynamicAssemblyAgentEtat(id: String) {
					
			use agentE: ecoAE.StateAgent(id) {
				bind finishedCycle to aFW.a
				bind getContext to aFW.b
				bind setContext to aFW.c
				bind push to aFW.d
				bind pull to aFW.e
			}
			use aFW: fw.StateForward(id)
		}
	}
	
	ecosystem Forward[I, J, K, L, M] {
		 species StateForward (id: String) {
		 	provides a: I
		 	provides b: J
		 	provides c: K
		 	provides d: L
		 	provides e: M
		 }
		 
		  species TransForward (id: String) {
		 	provides a: I
		 	provides b: J
		 	provides c: K
		 	provides d: L
		 	provides e: M
		 }
		 
		 requires i: I
		 requires j: J
		 requires k: K
		 provides l: L
	}
	
}